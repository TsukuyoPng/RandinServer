import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# Configuration
TOKEN = "7907549703:AAEoFBMUDhJ0UVv05vz8TSeHKOeD9XI3ADI"
CHANNEL_ID = "-1002884520007"
ADMIN_IDS = [6579797317]
CORRECT_CODE = "1KSLY-2LLWE-3UUZQ"
DATA_FILE = "data.json"
WEBAPP_URL = "https://tsukuyopng.github.io/RandinServer/"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL

# Logging setup
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load or initialize data
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"users": {}, "attempts": {}}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app={"url": WEBAPP_URL})]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É \"–£–≥–∞–¥–∞–π –∫–æ–¥\"!* üéâ\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    web_app_data = update.message.web_app_data.data
    
    try:
        data = json.loads(web_app_data)
        nickname = data.get("nickname", "").strip()
        code = data.get("code", "").strip()
    except json.JSONDecodeError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data = load_data()
    
    if nickname:
        user_data["users"][user_id] = nickname
        save_data(user_data)
    
    if not nickname:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ Discord")
        return
        
    if not code:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if user_id not in user_data["attempts"]:
        user_data["attempts"][user_id] = 0
    user_data["attempts"][user_id] += 1
    save_data(user_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if code == CORRECT_CODE:
        message = (
            f"üèÜ *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ —É–≥–∞–¥–∞–Ω!*\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *{nickname}* (ID: {user_id})\n"
            f"üîë –ö–æ–¥: *{code}*"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        try:
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=message,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üîî *–£–≥–∞–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥!*\n{message}",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        
        await update.message.reply_text(
            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥!* üèÜ",
            parse_mode="Markdown"
        )
    else:
        reply = await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üòä",
            parse_mode="Markdown"
        )
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        context.job_queue.run_once(
            delete_messages,
            60,
            data={
                "chat_id": update.message.chat_id,
                "user_message_id": update.message.message_id,
                "bot_message_id": reply.message_id
            }
        )

async def delete_messages(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    data = job.data
    try:
        await context.bot.delete_message(
            chat_id=data["chat_id"],
            message_id=data["user_message_id"]
        )
        await context.bot.delete_message(
            chat_id=data["chat_id"],
            message_id=data["bot_message_id"]
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def send_stats(context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    
    if not data["attempts"]:
        message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —á–∞—Å*\n–ü–æ–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –±—ã–ª–æ üòî"
    else:
        message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —á–∞—Å*\n"
        for user_id, attempts in data["attempts"].items():
            nickname = data["users"].get(user_id, "Unknown")
            message += f"üë§ {nickname}: *{attempts} –ø–æ–ø—ã—Ç–æ–∫*\n"
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        data["attempts"] = {}
        save_data(data)
    
    try:
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=message,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main():
    application = Application.builder().token(TOKEN).build()
    
    # Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.WEB_APP_DATA, webapp_data))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    application.job_queue.run_repeating(send_stats, interval=3600, first=10)
    
    # Start bot
    application.run_polling()

if __name__ == "__main__":
    main()
